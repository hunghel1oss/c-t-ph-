import axios from 'axios';
import toast from 'react-hot-toast';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

const apiClient = axios.create({
  baseURL: API_URL,
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
  },
});

console.log('üåç [Interceptor] API baseURL:', apiClient.defaults.baseURL);

// ========================================
// REQUEST INTERCEPTOR
// ========================================
apiClient.interceptors.request.use(
  (config) => {
    // ‚úÖ ƒê·ªåC TOKEN T·ª™ NHI·ªÄU KEY (∆∞u ti√™n accessToken)
    const token = localStorage.getItem('accessToken') || 
                  localStorage.getItem('token') ||
                  localStorage.getItem('authToken');
    
    console.log('üöÄ [Interceptor] Request starting...');
    console.log('üöÄ [Interceptor] Method:', config.method?.toUpperCase());
    console.log('üöÄ [Interceptor] URL:', config.url);
    console.log('üöÄ [Interceptor] Full URL:', `${config.baseURL}${config.url}`);
    console.log('üöÄ [Interceptor] Token exists:', !!token);
    
    if (token) {
      // ‚úÖ LOG TOKEN ƒê·ªÇ DEBUG (ch·ªâ 20 k√Ω t·ª± ƒë·∫ßu)
      console.log('üîë [Interceptor] Token (first 20 chars):', token.substring(0, 20) + '...');
      config.headers.Authorization = `Bearer ${token}`;
    } else {
      console.warn('‚ö†Ô∏è [Interceptor] No token found!');
      console.warn('‚ö†Ô∏è [Interceptor] localStorage keys:', Object.keys(localStorage));
    }
    
    console.log('üöÄ [Interceptor] Headers:', config.headers);
    
    // ‚úÖ CH·ªà LOG DATA N·∫æU KH√îNG PH·∫¢I FILE UPLOAD
    if (config.data && !(config.data instanceof FormData)) {
      console.log('üöÄ [Interceptor] Data:', config.data);
    }
    
    return config;
  },
  (error) => {
    console.error('‚ùå [Interceptor] Request error:', error);
    return Promise.reject(error);
  }
);

// ========================================
// RESPONSE INTERCEPTOR
// ========================================
apiClient.interceptors.response.use(
  (response) => {
    console.log('‚úÖ [Interceptor] Response received');
    console.log('‚úÖ [Interceptor] URL:', response.config.url);
    console.log('‚úÖ [Interceptor] Status:', response.status);
    console.log('‚úÖ [Interceptor] Data:', response.data);
    
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    console.error('‚ùå [Interceptor] Response error');
    console.error('‚ùå [Interceptor] URL:', error.config?.url);
    console.error('‚ùå [Interceptor] Status:', error.response?.status);
    console.error('‚ùå [Interceptor] Message:', error.response?.data?.message || error.message);
    console.error('‚ùå [Interceptor] Full response:', error.response?.data);

    // ========================================
    // X·ª¨ L√ù 401 - UNAUTHORIZED (TOKEN H·∫æT H·∫†N)
    // ========================================
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      console.log('üîÑ [Interceptor] Got 401, attempting token refresh...');

      try {
        const refreshToken = localStorage.getItem('refreshToken');
        
        if (!refreshToken) {
          console.error('‚ùå [Interceptor] No refresh token, cannot refresh');
          throw new Error('No refresh token');
        }

        // ‚úÖ G·ªåI API REFRESH TOKEN
        const response = await axios.post(
          `${apiClient.defaults.baseURL}/api/auth/refresh`,
          { refreshToken },
          {
            headers: {
              'Content-Type': 'application/json'
            }
          }
        );

        const { accessToken, token: newToken } = response.data;
        const finalToken = accessToken || newToken;
        
        if (!finalToken) {
          throw new Error('No token in refresh response');
        }

        // ‚úÖ L∆ØU TOKEN M·ªöI
        localStorage.setItem('accessToken', finalToken);
        localStorage.setItem('token', finalToken); // L∆∞u c·∫£ 2 key ƒë·ªÉ ƒë·∫£m b·∫£o

        console.log('‚úÖ [Interceptor] Token refreshed successfully');

        // ‚úÖ RETRY REQUEST V·ªöI TOKEN M·ªöI
        originalRequest.headers.Authorization = `Bearer ${finalToken}`;
        return apiClient(originalRequest);
        
      } catch (refreshError) {
        console.error('‚ùå [Interceptor] Refresh token failed:', refreshError);
        
        // ‚úÖ X√ìA TOKEN V√Ä REDIRECT V·ªÄ LOGIN
        localStorage.removeItem('accessToken');
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        
        toast.error('Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
        
        // ‚úÖ REDIRECT V·ªÄ LOGIN
        setTimeout(() => {
          window.location.href = '/login';
        }, 1000);
        
        return Promise.reject(new Error('AUTHENTICATION_REQUIRED'));
      }
    }

    // ========================================
    // X·ª¨ L√ù C√ÅC L·ªñI KH√ÅC
    // ========================================
    
    // ‚úÖ 404 - NOT FOUND
    if (error.response?.status === 404) {
      const message = error.response?.data?.message || 'Kh√¥ng t√¨m th·∫•y t√†i nguy√™n';
      toast.error(message);
    }

    // ‚úÖ 400 - BAD REQUEST
    if (error.response?.status === 400) {
      const message = error.response?.data?.message || 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá';
      toast.error(message);
    }

    // ‚úÖ 403 - FORBIDDEN
    if (error.response?.status === 403) {
      const message = error.response?.data?.message || 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p';
      toast.error(message);
    }

    // ‚úÖ 500 - SERVER ERROR
    if (error.response?.status === 500) {
      toast.error('L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau');
    }

    // ‚úÖ NETWORK ERROR
    if (error.message === 'Network Error') {
      toast.error('L·ªói k·∫øt n·ªëi m·∫°ng, vui l√≤ng ki·ªÉm tra internet');
    }

    // ‚úÖ TIMEOUT
    if (error.code === 'ECONNABORTED') {
      toast.error('Y√™u c·∫ßu qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i');
    }

    return Promise.reject(error);
  }
);

export default apiClient;
