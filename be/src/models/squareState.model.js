const mongoose = require('mongoose');

const squareStateSchema = new mongoose.Schema({
  // Tham chi·∫øu ƒë·∫øn SquareTemplate
  squareId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'SquareTemplate', 
    required: true 
  },
  
  // B·∫ÆT BU·ªòC: Tham chi·∫øu ƒë·∫øn Game/Room
  roomId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Game', // Ho·∫∑c 'Room'
    required: true
  },
  
  // C√°c tr∆∞·ªùng tr·∫°ng th√°i
  owner: { type: mongoose.Schema.Types.ObjectId, ref: 'PlayerState', default: null },
  level: { type: Number, default: 0 },
  isMortgage: { type: Boolean, default: false },
}, { timestamps: true });

// ----------------------------------------------------
// üî• FIX D·ª®T ƒêI·ªÇM E11000: CH·ªà C√íN CH·ªà M·ª§C T·ªîNG H·ª¢P (COMPUND INDEX)
// ----------------------------------------------------

// L∆ØU √ù: ƒê√£ lo·∫°i b·ªè ho√†n to√†n c√°c l·ªánh .index({ squareId: 1 }, { unique: true }) 
// v√† c√°c l·ªánh .on('index', ...) ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi ch·ªâ m·ª•c ƒë√£ t·ªìn t·∫°i trong DB.

// Ch·ªâ m·ª•c T·ªîNG H·ª¢P AN TO√ÄN: Ch·ªâ y√™u c·∫ßu s·ª± k·∫øt h·ª£p (roomId + squareId) l√† DUY NH·∫§T.
// ƒê√¢y l√† ch·ªâ m·ª•c b·∫°n th·ª±c s·ª± c·∫ßn cho Game Monopoly.
squareStateSchema.index({ roomId: 1, squareId: 1 }, { unique: true });
// ----------------------------------------------------

module.exports = mongoose.model('SquareState', squareStateSchema);
